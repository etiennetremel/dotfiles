"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => General
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

filetype off " required

" load plugins from vundle
source ~/.vim/plugins.vim

set nocompatible " be iMproved, required
set autoread " detect when a file is changed

" make backspace behave in a sane manner
set backspace=indent,eol,start

set noswapfile

set number
set ruler
set scrolloff=3
set title
set wrap

set hlsearch
set ignorecase
set incsearch
set smartcase

set backspace=indent,eol,start
set noerrorbells
set visualbell

" Tab control
set expandtab " insert spaces rather than tabs for <Tab>
set smarttab " tab respects 'tabstop', 'shiftwidth', and 'softtabstop'
set tabstop=2 " the visible width of tabs
set softtabstop=2 " edit as if the tabs are 2 characters wide
set shiftwidth=2 " number of spaces to use for indent and unindent
set shiftround " round indent to a multiple of 'shiftwidth'
set completeopt+=longest

" faster redrawing
set ttyfast

" Add full file path to existing statusline
" set statusline+=%F

if has('mouse')
  set mouse=a
endif

" highlight conflicts
match ErrorMsg '^\(<\|=\|>\)\{7\}\([^=].\+\)\?$'

set hidden

" Pan navigation
" noremap <C-j> <C-w>j
" noremap <C-k> <C-w>k
" noremap <C-h> <C-w>h
" noremap <C-l> <C-w>l

" Redraws the screen and removes any search highlighting.
noremap <F2> :nohl<CR><C-l>

" Autoformat
noremap <F4> :Autoformat<CR>

" Gundo (undo plugin)
noremap <F5> :GundoToggle<CR>

" Map start key separately from next key
let g:multi_cursor_start_key='<F6>'


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => User Interface
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set so=7 " set 7 lines to the cursors - when moving vertical
set wildmenu " enhanced command line completion
set hidden " current buffer can be put into background
set showcmd " show incomplete commands
set noshowmode " don't show which mode disabled for PowerLine
set wildmode=list:longest " complete files like a shell
set scrolloff=3 " lines of text around cursor
set shell=$SHELL
set cmdheight=1 " command bar height

set title " set terminal title

" Searching
set ignorecase " case insensitive searching
set smartcase " case-sensitive if expresson contains a capital letter
set hlsearch
set incsearch " set incremental search, like modern browsers
set nolazyredraw " don't redraw while executing macros

set magic " Set magic on, for regex

set showmatch " show matching braces
set mat=2 " how many tenths of a second to blink

" error bells
set noerrorbells
set visualbell
set t_vb=
set tm=500

set wrap "turn on line wrapping
set wrapmargin=8 " wrap lines when coming within n characters from side
set linebreak " set soft wrapping
set showbreak=â€¦ " show ellipsis at breaking

set autoindent " automatically set indent of new line
set smartindent

set cursorline " highlight current line

" set column at 120
set colorcolumn=120

" show relative line numbers
set relativenumber


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Theme
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set encoding=utf8
if $COLORTERM == 'gnome-terminal'
  set t_Co=256
endif

" Available colorscheme
execute "colorscheme Tomorrow-Night-Bright"
" execute "colorscheme Tomorrow-Night"
" execute "colorscheme onedark"

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Syntax highlighting
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
syntax on
filetype plugin on

" ES6 as JS file
au BufNewFile,BufRead *.es6 set filetype=javascript


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Plugins and customs cmd
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" vim-commentary key binding
autocmd FileType apache setlocal commentstring=#\ %s

" NERDTree
let NERDTreeShowHidden=1
autocmd StdinReadPre * let s:std_in=1
" autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
map <C-n> :NERDTreeToggle<CR>

" close NERDTree after a file is opened
let g:NERDTreeQuitOnOpen=1

" CtrlP config
let g:ctrlp_cache_dir = $HOME . '/.cache/ctrlp'
" let g:ctrlp_clear_cache_on_exit = 0
let g:ctrlp_regexp = 1
let g:ctrlp_custom_ignore = {
      \ 'dir': '\.git$\|node_modules$\|bower_components$\|\.hg$\|\.svn$',
      \ 'file': '\.exe$\|\.so|\.min\.js$'
      \}
let g:ctrlp_mruf_case_sensitive = 0

" Removes trailing spaces on file save
autocmd BufWritePre * :%s/\s\+$//e


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Functions
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" smart tab completion
function! Smart_TabComplete()
  let line = getline('.')                         " current line

  let substr = strpart(line, -1, col('.')+1)      " from the start of the current
  " line to one character right
  " of the cursor
  let substr = matchstr(substr, '[^ \t]*$')       " word till cursor
  if (strlen(substr)==0)                          " nothing to match on empty string
    return '\<tab>'
  endif
  let has_period = match(substr, '\.') != -1      " position of period, if any
  let has_slash = match(substr, '\/') != -1       " position of slash, if any
  if (!has_period && !has_slash)
    return '\<C-X>\<C-P>'                         " existing text matching
  elseif ( has_slash )
    return '\<C-X>\<C-F>'                         " file matching
  else
    return '\<C-X>\<C-O>'                         " plugin matching
  endif
endfunction
